package cec.chronicles.popup.puzzle;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragGestureRecognizer;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.IOException;
import java.util.Arrays;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;

import cec.chronicles.popup.AbstractCECPopup;
import cec.chronicles.states.GameState;

/**
 * Drag and drop puzzle
 * 
 * @author Pýnar Ayaz
 * @version 05.5.2017
 */
public class ReorderableJList extends JList implements DragSourceListener, DropTargetListener, DragGestureListener {

	private static final long serialVersionUID = -4164965003447017284L;
	private AbstractCECPopup panel;
	static DataFlavor localObjectFlavor;
	static {
		try {
			localObjectFlavor = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType);
		} catch (ClassNotFoundException cnfe) {
			cnfe.printStackTrace();
		}
	}
	static DataFlavor[] supportedFlavors = { localObjectFlavor };
	DragSource dragSource;
	DropTarget dropTarget;
	Object dropTargetCell;
	int draggedIndex = -1;

	public static String[] currentAway;
	public static String[] correctOrderAway;

	public ReorderableJList(AbstractCECPopup p) {
		super();
		panel = p;
		setCellRenderer(new ReorderableListCellRenderer());
		setModel(new DefaultListModel());
		dragSource = new DragSource();
		DragGestureRecognizer dgr = dragSource.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_MOVE, this);
		dropTarget = new DropTarget(this, this);
	}

	// DragGestureListener
	public void dragGestureRecognized(DragGestureEvent dge) {
		// System.out.println ("dragGestureRecognized");
		// find object at this x,y
		Point clickPoint = dge.getDragOrigin();
		int index = locationToIndex(clickPoint);
		if (index == -1)
			return;
		Object target = getModel().getElementAt(index);
		Transferable trans = new RJLTransferable(target);
		draggedIndex = index;
		dragSource.startDrag(dge, Cursor.getDefaultCursor(), trans, this);
	}

	// DragSourceListener events
	public void dragDropEnd(DragSourceDropEvent dsde) {
		// System.out.println ("dragDropEnd()");
		dropTargetCell = null;
		draggedIndex = -1;
		repaint();
	}

	public void dragEnter(DragSourceDragEvent dsde) {
	}

	public void dragExit(DragSourceEvent dse) {
	}

	public void dragOver(DragSourceDragEvent dsde) {
	}

	public void dropActionChanged(DragSourceDragEvent dsde) {
	}

	// DropTargetListener events
	public void dragEnter(DropTargetDragEvent dtde) {
		// System.out.println ("dragEnter");
		if (dtde.getSource() != dropTarget)
			dtde.rejectDrag();
		else {
			dtde.acceptDrag(DnDConstants.ACTION_COPY_OR_MOVE);
			// System.out.println ("accepted dragEnter");
		}

	}

	public void dragExit(DropTargetEvent dte) {
	}

	public void dragOver(DropTargetDragEvent dtde) {
		// figure out which cell it's over, no drag to self
		if (dtde.getSource() != dropTarget)
			dtde.rejectDrag();
		Point dragPoint = dtde.getLocation();
		int index = locationToIndex(dragPoint);
		if (index == -1)
			dropTargetCell = null;
		else
			dropTargetCell = getModel().getElementAt(index);
		repaint();
	}

	public void drop(DropTargetDropEvent dtde) {
		// System.out.println ("drop()!");
		if (dtde.getSource() != dropTarget) {
			// System.out.println ("rejecting for bad source (" +
			// dtde.getSource().getClass().getName() + ")");
			dtde.rejectDrop();
			return;
		}
		Point dropPoint = dtde.getLocation();
		int index = locationToIndex(dropPoint);
		// System.out.println ("drop index is " + index);
		boolean dropped = false;
		try {
			if ((index == -1) || (index == draggedIndex)) {
				// System.out.println ("dropped onto self");
				dtde.rejectDrop();
				return;
			}
			dtde.acceptDrop(DnDConstants.ACTION_MOVE);
			// System.out.println ("accepted");
			Object dragged = dtde.getTransferable().getTransferData(localObjectFlavor);
			// move items - note that indicies for insert will
			// change if [removed] source was before target
			// System.out.println ("drop " + draggedIndex + " to " + index);
			boolean sourceBeforeTarget = (draggedIndex < index);
			// System.out.println ("source is" +
			// (sourceBeforeTarget ? "" : " not") +
			// " before target");
			// System.out.println ("insert at " +
			// (sourceBeforeTarget ? index-1 : index));
			DefaultListModel mod = (DefaultListModel) getModel();
			mod.remove(draggedIndex);
			mod.add((sourceBeforeTarget ? index - 1 : index), dragged);
			dropped = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		dtde.dropComplete(dropped);
		//// checking stuff ///////FINISH CONDITION
		String[] correctOrder = { "Pick up the remote", "Remove the lid on the back", "Take the dead batteries out",
				"Take out new batteries from pocket", "Place the new batteries inside the battery holder",
				"Make sure batteries are facing the right ways polarwise", "Put the lid back on and secure it" };
		ListModel temp = this.getModel();
		int size = temp.getSize();
		String[] current = new String[size];
		for (int i = 0; i < size; i++) {
			current[i] = (String) temp.getElementAt(i);
		}

		currentAway = current;
		correctOrderAway = correctOrder;

		if (Arrays.equals(current, correctOrder)) {
			panel.enableBackButton();
			GameState.player.completePuzzle(3);
		}
	}

	public void dropActionChanged(DropTargetDragEvent dtde) {
	}

	// test
	/*
	 * public static void main (String[] args) { JList list = new
	 * ReorderableJList (); DefaultListModel defModel = new DefaultListModel();
	 * list.setModel (defModel); String[] listItems = {
	 * "Take out new batteries from pocket", "Pick up the remote",
	 * "Place the new batteries inside the battery holder",
	 * "Take the dead batteries out", "Remove the lid on the back",
	 * "Put the lid back on and secure it",
	 * "Make sure batteries are facing the right ways polarwise" };
	 * 
	 * //RANDOMLY MIX UP THESE GUYS java.util.List<String> strList =
	 * Arrays.asList(listItems); Collections.shuffle(strList); listItems =
	 * strList.toArray(new String[strList.size()]);
	 * 
	 * 
	 * Iterator it = Arrays.asList(listItems).iterator(); while (it.hasNext())
	 * defModel.addElement (it.next()); // show list JScrollPane scroller = new
	 * JScrollPane (list, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,
	 * ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); list.setFont(new
	 * Font("Calibri",Font.BOLD,36)); scroller.setPreferredSize(new
	 * Dimension(1200,800)); JFrame frame = new JFrame ("RC Algorithm Puzzle");
	 * frame.getContentPane().add (scroller); frame.pack();
	 * frame.setVisible(true); }
	 */

	class RJLTransferable implements Transferable {
		Object object;

		public RJLTransferable(Object o) {
			object = o;
		}

		public Object getTransferData(DataFlavor df) throws UnsupportedFlavorException, IOException {
			if (isDataFlavorSupported(df))
				return object;
			else
				throw new UnsupportedFlavorException(df);
		}

		public boolean isDataFlavorSupported(DataFlavor df) {
			return (df.equals(localObjectFlavor));
		}

		public DataFlavor[] getTransferDataFlavors() {
			return supportedFlavors;
		}
	}

	// custom renderer
	class ReorderableListCellRenderer extends DefaultListCellRenderer {
		boolean isTargetCell;
		boolean isLastItem;
		Insets normalInsets, lastItemInsets;
		int BOTTOM_PAD = 30;

		public ReorderableListCellRenderer() {
			super();
			normalInsets = super.getInsets();
			lastItemInsets = new Insets(normalInsets.top, normalInsets.left, normalInsets.bottom + BOTTOM_PAD,
					normalInsets.right);
		}

		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected,
				boolean hasFocus) {
			isTargetCell = (value == dropTargetCell);
			isLastItem = (index == list.getModel().getSize() - 1);
			boolean showSelected = isSelected & (dropTargetCell == null);
			return super.getListCellRendererComponent(list, value, index, showSelected, hasFocus);
		}

		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			if (isTargetCell) {
				g.setColor(Color.black);
				g.drawLine(0, 0, getSize().width, 0);
			}
		}
	}
}